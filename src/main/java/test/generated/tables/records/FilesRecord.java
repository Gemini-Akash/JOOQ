/*
 * This file is generated by jOOQ.
 */
package test.generated.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;

import test.generated.tables.Files;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FilesRecord extends UpdatableRecordImpl<FilesRecord> implements Record5<String, byte[], String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>users.files.student_id</code>.
     */
    public FilesRecord setStudentId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>users.files.student_id</code>.
     */
    public String getStudentId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>users.files.data</code>.
     */
    public FilesRecord setData(byte[] value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>users.files.data</code>.
     */
    public byte[] getData() {
        return (byte[]) get(1);
    }

    /**
     * Setter for <code>users.files.name</code>.
     */
    public FilesRecord setName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>users.files.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>users.files.type</code>.
     */
    public FilesRecord setType(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>users.files.type</code>.
     */
    public String getType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>users.files.context</code>.
     */
    public FilesRecord setContext(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>users.files.context</code>.
     */
    public String getContext() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, byte[], String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<String, byte[], String, String, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Files.FILES.STUDENT_ID;
    }

    @Override
    public Field<byte[]> field2() {
        return Files.FILES.DATA;
    }

    @Override
    public Field<String> field3() {
        return Files.FILES.NAME;
    }

    @Override
    public Field<String> field4() {
        return Files.FILES.TYPE;
    }

    @Override
    public Field<String> field5() {
        return Files.FILES.CONTEXT;
    }

    @Override
    public String component1() {
        return getStudentId();
    }

    @Override
    public byte[] component2() {
        return getData();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public String component4() {
        return getType();
    }

    @Override
    public String component5() {
        return getContext();
    }

    @Override
    public String value1() {
        return getStudentId();
    }

    @Override
    public byte[] value2() {
        return getData();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public String value4() {
        return getType();
    }

    @Override
    public String value5() {
        return getContext();
    }

    @Override
    public FilesRecord value1(String value) {
        setStudentId(value);
        return this;
    }

    @Override
    public FilesRecord value2(byte[] value) {
        setData(value);
        return this;
    }

    @Override
    public FilesRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public FilesRecord value4(String value) {
        setType(value);
        return this;
    }

    @Override
    public FilesRecord value5(String value) {
        setContext(value);
        return this;
    }

    @Override
    public FilesRecord values(String value1, byte[] value2, String value3, String value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FilesRecord
     */
    public FilesRecord() {
        super(Files.FILES);
    }

    /**
     * Create a detached, initialised FilesRecord
     */
    public FilesRecord(String studentId, byte[] data, String name, String type, String context) {
        super(Files.FILES);

        setStudentId(studentId);
        setData(data);
        setName(name);
        setType(type);
        setContext(context);
    }
}
